client:
1.start a typescript app
2.builed the boiler plate:
2-1.npm i all the relevant dependencies
2-2.orgenize the app properly
2-3.wrap the app in state management(redux or context api)
3.create login/register/vacation components templates
4.create appRouter+navbar to navigate
5.register-will be envisible unless you press the create user in login page.
5-1.create a redirect to the register page from the login page.
5-2.after you are done registering you will be redirected back to the login page.
6.login-if user exsists in the db and password is valid save the server jwt to local storage.
6-1.jwt will open the options for navigation in the site (vacation will be open)
6-2.will be redirected to vacations.
7.vacations-get from server db the saved vacations from the seed/admin(astablished later in the project)
 


server:
1.init the server
2.npm i all the relevant dependencies
3.create a seed that will randomly create vacations
4.create a conection to the clinet
5.create a conection to the db
6.astablish a client register enviroment that will write a user into the db with a hashed password(bcrypt).
7.astablish a client login enviroment that will get a user from the db and sent to the client a jwt token.

db:
1.crate database
2.create user table
3.create vacation table
4.create fac_vacations table